#!/usr/bin/env python

#  Copyright (c) 2022 David King <dave@daveking.com>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#################################################################################
#  Mine cryptocurrency when the screensaver is active.
#
#  Written for systems that use either Xscreensaver or the Gnome screen saver.

import shutil
import subprocess
import threading
import traceback

import logging
logging.basicConfig(filename='/tmp/idleMining.log', encoding='utf-8', level=logging.DEBUG, format='%(asctime)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

import socket
hostname = socket.gethostname().split('.')[0]

#  When script terminates also terminate the "xscreenserver-command -watch"
#  child process
def kill_xscrcommand(signum, frame):
	global xscr_proc
	if xscr_proc is not None:
		logging.info('terminating xscreensaver-command child process')
		xscr_proc.terminate()
		xscr_proc.communicate()
		xscr_proc = None
	exit()
	
#  Start/stop miner		
def activeChanged(param):
	global miner
	try:
		logging.info('ActiveChanged signal = {}'.format(param))
		if param and miner is None:			
			cmd = '/home/dlk/ethereum/gminer/miner --algo ethash --server eth.2miners.com:2020 --user 16xhz7paBrozb71r2rzCSjM7HctLrJsvuB.{} --api 10050'.format(hostname)
			miner = subprocess.Popen(cmd, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
			logging.info('started miner')
		elif not param and miner is not None:
			miner.terminate()
			miner.communicate()
			miner = None
			logging.info('stopped miner')
	except Exception as e:	
		logging.exception('unexpected exception in activeChanged function:\n{}\n\n'.format(e))

#  Watch dbus for screensaver events
def dbusMonitor():
	try:
		logging.info('starting dbusMonitor thread')
		from pydbus import SessionBus
		bus = SessionBus()
		gnome_proxy = bus.get('org.gnome.ScreenSaver')
		gnome_con = gnome_proxy.ActiveChanged.connect(activeChanged)
		freedesktop_proxy = bus.get('org.freedesktop.ScreenSaver')
		freedesktop_con = freedesktop_proxy.ActiveChanged.connect(activeChanged)
		from gi.repository import GLib
		loop = GLib.MainLoop()
		loop.run()
	except Exception as e:	
		logging.exception('unexpected exception in dbusMonitor thread:\n{}\n\n'.format(e))

#  Watch "xscreensaver-command -watch" command output for screensaver events
def xscreensaverMonitor():
	global xscr_proc
	try:
		logging.info('starting xscreensaverMonitor thread')
		cmd = 'xscreensaver-command -watch'
		xscr_proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		while True:
			line = xscr_proc.stdout.readline().decode('utf-8').strip()
			if (line.startswith('BLANK ') or line.startswith('LOCK ')):
				activeChanged(True)
			elif line.startswith('UNBLANK '):
				activeChanged(False)
	except ValueError as e:
		if not str(e).startswith('PyMemoryView_FromBuffer()'):
			logging.exception('ValueError exception in xscreenSaver thread:\n{}\n\n'.format(e))
	except Exception as e:
		logging.exception('unexpected exception in xscreenSaver thread:\n{}\n\n'.format(e))
		
try:
	#  When script terminates also terminate the "xscreenserver-command -watch"
	#  child process
	import signal
	signal.signal(signal.SIGTERM, kill_xscrcommand)
	
	#  Start each screensaver monitor running it a seperate thread
	xscr_proc = None
	miner = None
	dbus_thread = threading.Thread(target=dbusMonitor)
	dbus_thread.daemon = True
	dbus_thread.start()
	if shutil.which('xscreensaver-command') is not None:
		xscreensaver_thread = threading.Thread(target=xscreensaverMonitor)
		xscreensaver_thread.daemon = True
		xscreensaver_thread.start()
		xscreensaver_thread.join()
	dbus_thread.join()
except KeyboardInterrupt:
	logging.info('terminated with Ctrl-C')
except Exception as e:
	logging.exception('unexpected exception in main:\n{}\n\n'.format(e))
